{"version":3,"sources":["reducers/rootReducer.js","reducers/appReducer.js","actions/appAction.js","App.js","selectors/appSelector.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","homePageState","state","arguments","length","undefined","Map","action","type","setIn","target","value","actions","changePageView","inputStagedUsernameAction","inputStagedPasswordAction","inputStagedPinAction","inputStagedEmailAction","loginUserAction","validateUserAction","username","password","dispatch","fetch","method","body","JSON","stringify","headers","Content-Type","then","response","json","signedUp","logoutUserAction","signupUserAction","pin","email","App","pageFocus","_this","props","userIsLoggedIn","react_default","a","createElement","className","onChange","_ref","inputStagedUsername","placeholder","_ref2","inputStagedPassword","onClick","e","loginUser","currentUsername","currentPassword","_ref3","_ref4","_ref5","inputStagedPin","_ref6","inputStagedEmail","signupUser","currentPin","currentEmail","currentFocus","render","switchViewTo","logoutUser","Component","currentPageFocus","getIn","isLoggedIn","stagedUsername","stagedPassword","stagedPin","stagedEmail","connect","Boolean","window","location","hostname","match","ReactDOM","es","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6609352.chunk.js","sourcesContent":["/*\n src/reducers/rootReducer.js\n*/\n\nimport { combineReducers } from 'redux-immutable';\n\nimport appReducer from './appReducer';\n\nexport default combineReducers({\n  \"homePageState\": appReducer,\n});","/*\n src/reducers/appReducer.js\n*/\nimport { Map } from 'immutable';\n\nexport default (state = new Map(), action) => {\n\n  switch (action.type) {\n\n    case 'TOGGLE_PAGE_VIEW': return state.setIn(['viewFocus'], action.target);\n\n    // --- LOGIN/SIGNUP --- \\\\\n\n    case 'INPUT_STAGED_USERNAME': return state.setIn(['stagedUsername'], action.value);\n\n    case 'INPUT_STAGED_PASSWORD': return state.setIn(['stagedPassword'], action.value);\n\n    case 'INPUT_STAGED_PIN': return state.setIn(['stagedPin'], action.value); \n\n    case 'INPUT_STAGED_EMAIL': return state.setIn(['stagedEmail'], action.value); \n\n    case 'LOGIN_USER': return state.setIn(['isLoggedIn'], true);\n\n    case 'LOGOUT_USER': return state.setIn(['isLoggedIn'], false);\n\n    default: return state;\n  }\n  \n}","/*\n src/actions/appAction.js\n*/\n\nimport fetch from 'cross-fetch'\n\nexport const actions = {\n\n  changePageView: target => ({\n    type: 'TOGGLE_PAGE_VIEW',\n    target\n  }),\n\n  // --- Login/signup info --- \\\\\n\n  inputStagedUsernameAction: value => ({\n    type: 'INPUT_STAGED_USERNAME',\n    value,\n  }),\n\n  inputStagedPasswordAction: value => ({\n    type: 'INPUT_STAGED_PASSWORD',\n    value,\n  }),\n\n  inputStagedPinAction: value => ({\n    type: 'INPUT_STAGED_PIN',\n    value\n  }),\n\n  inputStagedEmailAction: value => ({\n    type: 'INPUT_STAGED_EMAIL',\n    value\n  }),\n\n  // --- Login/signup logic --- \\\\\n\n  loginUserAction: () => ({\n    type: \"LOGIN_USER\"\n  }),\n\n  validateUserAction: (username, password) => dispatch => {\n    fetch(\"/loginCreds\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n      headers: {\"Content-Type\": \"application/json\"}\n    }).then(response => response.json())\n    .then(json => {\n      if (json.signedUp) {\n        dispatch(actions.loginUserAction());\n      } else {\n        dispatch(actions.logoutUserAction());\n      }\n    });\n  },\n\n  signupUserAction: (username, password, pin, email) => dispatch => {\n    fetch(\"/signupUser\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password,\n        email,\n        pin,\n      }),\n      headers: {\"Content-Type\": \"application/json\"}\n    }).then(response => response.json())\n    .then(json => {\n      if (json.signedUp) {\n        dispatch(actions.loginUserAction());\n      } else {\n        dispatch(actions.logoutUserAction());\n      }\n    })\n  },\n\n  logoutUserAction: () => ({\n    type: 'LOGOUT_USER',\n  }),\n}","/*\n src/App.js\n*/\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// redux imports\nimport { actions } from './actions/appAction';\nimport * as componentSelectors from './selectors/appSelector';\n\nimport './App.css';\n\nclass App extends Component {\n\n  pageFocus = () => {\n    \n    if (!this.props.userIsLoggedIn) {\n      return <div className=\"bodyWrapper\">\n        <b className=\"loginTitle\">Please Login or Signup!!</b>\n        {/* login */}\n        <div className=\"inputWrapper\">\n          <b className=\"pleaseLogin\">Login</b>\n          <input className=\"inputForm\"\n            type=\"text\"\n            onChange={({ target: { value } }) =>\n              this.props.inputStagedUsername(value)}\n            placeholder=\"username\">\n          </input>\n          <input className=\"inputForm\"\n            type=\"password\"\n            onChange={({ target: { value } }) =>\n              this.props.inputStagedPassword(value)}\n            placeholder=\"password\">\n          </input>\n          <b onClick={e => this.props.loginUser(this.props.currentUsername, \n                                                this.props.currentPassword)}\n            className=\"inputButton\">Login</b>\n        </div>\n        {/* signup */}\n        <div className=\"inputWrapper\">\n          <b className=\"pleaseLogin\">Sign up</b>\n          <input className=\"inputForm\"\n            type=\"text\"\n            onChange={({ target: { value } }) =>\n              this.props.inputStagedUsername(value)}\n            placeholder=\"username\">\n          </input>\n          <input className=\"inputForm\"\n            type=\"text\"\n            onChange={({ target: { value } }) =>\n              this.props.inputStagedPassword(value)}\n            placeholder=\"password\">\n          </input>\n          <input className=\"inputForm\"\n            type=\"number\"\n            onChange={({ target: { value } }) =>\n              this.props.inputStagedPin(value)}\n            placeholder=\"Pin\">\n          </input>\n          <input className=\"inputForm\"\n            type=\"email\"\n            onChange={({ target: { value } }) =>\n              this.props.inputStagedEmail(value)}\n            placeholder=\"email\">\n          </input>\n          <b onClick={e => this.props.signupUser(this.props.currentUsername, \n                                                 this.props.currentPassword,\n                                                 this.props.currentPin,\n                                                 this.props.currentEmail)}\n            className=\"inputButton\">Sign up</b>\n        </div>\n      </div>\n    }\n\n    switch (this.props.currentFocus) {\n\n      case \"kills\": return <div className=\"bodyWrapper\">\n        {/* TODO TEDDY */}\n        <h1 className=\"bodyElementTitle\">KILLS</h1>\n      </div>\n\n      case \"gameOverview\": return <div className=\"bodyWrapper\">\n        {/* TODO TEDDY */}\n        <h1 className=\"bodyElementTitle\">GAME OVERVIEW</h1>\n      </div>\n\n      case \"profile\": return <div className=\"bodyWrapper\">\n        {/* TODO TEDDY */}\n        <h1 className=\"bodyElementTitle\">PROFILE</h1>\n      </div>\n\n      case \"rules\": return <div className=\"bodyWrapper\">\n        {/* TODO TEDDY */}\n        <h1 className=\"bodyElementTitle\">RULES</h1>\n      </div>\n\n      case \"createGame\": return <div className=\"bodyWrapper\">\n        {/* TODO TEDDY */}\n        <h1 className=\"bodyElementTitle\">CREATE</h1>\n      </div>\n\n      // home\n      default: return <div className=\"bodyWrapper\">\n        {/* TODO TEDDY */}\n        <h1 className=\"bodyElementTitle\">HOME</h1>\n      </div>\n    } \n  }\n\n  render = () => (\n    <div className=\"App\">\n      <div className=\"homepage\">\n        <div className=\"nagivagorWrapper\">\n          <b className=\"title\">\n            EPO E-ssassin\n          </b>\n          <div className=\"navigatorBar\">\n            <b className=\"navigatorButton\"\n               onClick={e => this.props.switchViewTo(\"home\")}>Home</b>\n            <b className=\"navigatorButton\"\n               onClick={e => this.props.switchViewTo(\"kills\")}>KILLS?!</b>\n            <b className=\"navigatorButton\"\n               onClick={e => this.props.switchViewTo(\"gameOverview\")}>Game overview</b>\n            <b className=\"navigatorButton\"\n               onClick={e => this.props.switchViewTo(\"profile\")}>Profile</b>\n            <b className=\"navigatorButton\"\n               onClick={e => this.props.switchViewTo(\"rules\")}>Rules</b>\n            <b className=\"navigatorButton\"\n               onClick={e => this.props.logoutUser()}>Logout</b>\n          </div>\n        </div>\n        {this.pageFocus()}\n      </div>\n    </div>\n  );\n}\n\nconst {\n  currentPageFocus,\n  isLoggedIn,\n\n  stagedUsername,\n  stagedPassword,\n  stagedPin,\n  stagedEmail,\n} = componentSelectors\n\nconst mapStateToProps = state => ({\n  currentFocus: currentPageFocus(state),\n  userIsLoggedIn: isLoggedIn(state),\n\n  currentUsername: stagedUsername(state),\n  currentPassword: stagedPassword(state),\n  currentPin: stagedPin(state),\n  currentEmail: stagedEmail(state),\n});\n\nconst {\n  changePageView,\n\n  inputStagedUsernameAction,\n  inputStagedPasswordAction,\n  inputStagedPinAction,\n  inputStagedEmailAction,\n\n  validateUserAction,\n  signupUserAction,\n  logoutUserAction,\n} = actions;\n\nconst mapDispatchToProps = dispatch => ({\n  switchViewTo: target => dispatch(changePageView(target)),\n\n  inputStagedUsername: value => dispatch(inputStagedUsernameAction(value)),\n  inputStagedPassword: value => dispatch(inputStagedPasswordAction(value)),\n  inputStagedPin: value => dispatch(inputStagedPinAction(value)),\n  inputStagedEmail: value => dispatch(inputStagedEmailAction(value)),\n\n  loginUser: (username, password) => dispatch(\n                                      validateUserAction(username, password)),\n  signupUser: (username, password, pin, email) => dispatch(\n                                                    signupUserAction(username, \n                                                                     password, \n                                                                     pin, \n                                                                     email)),\n  logoutUser: () => dispatch(logoutUserAction()),\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n\n","// component selectors\n// import { List } from 'immutable';\n\nexport const currentPageFocus = state => state.getIn(\n  ['homePageState', 'viewFocus'],\n  \"home\"\n);\n\nexport const isLoggedIn = state => state.getIn(\n  ['homePageState', 'isLoggedIn'],\n  false\n);\n\nexport const stagedUsername = state => state.getIn(\n  ['homePageState', 'stagedUsername'],\n  \"\"\n);\n\nexport const stagedPassword = state => state.getIn(\n  ['homePageState', 'stagedPassword'],\n  \"\"\n);\n\nexport const stagedPin = state => state.getIn(\n  ['homePageState', 'stagedPin'],\n  \"\"\n);\n\nexport const stagedEmail = state => state.getIn(\n  ['homePageState', 'stagedEmail'],\n  \"\"\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n src/index.js\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();","/*\n * src/store.js\n * With initialState\n*/\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './reducers/rootReducer';\n\n\nexport default () => createStore(\n        rootReducer, \n        composeWithDevTools(applyMiddleware(thunk))\n  )\n"],"sourceRoot":""}