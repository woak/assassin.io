{"version":3,"sources":["reducers/rootReducer.js","reducers/appReducer.js","App.js","actions/appAction.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","homePageState","state","arguments","length","undefined","Map","type","App","render","react_default","a","createElement","className","Component","componentSelectors","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","es","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAQeA,4BAAgB,CAC7BC,cCJa,WAA+B,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB,IAAIG,MAGf,OAHiCH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAE7BE,KACGL,4DCIdM,oNAEJC,OAAS,kBACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,uDAJcE,0BAUdC,eCjBmB,IDyBvB,IAIeC,cAVS,SAAAd,GAAK,MAAK,IAMP,SAAAe,GAAQ,MAAK,IAIzBD,CAGbR,GEzBkBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASd,OACPC,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUC,MCFSC,sBACbC,EACAC,8BAAoBC,0BAAgBC,QDCxCpB,EAAAC,EAAAC,cAACmB,EAAD,OAEFC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ac62839.chunk.js","sourcesContent":["/*\n src/reducers/rootReducer.js\n*/\n\nimport { combineReducers } from 'redux-immutable';\n\nimport appReducer from './appReducer';\n\nexport default combineReducers({\n  \"homePageState\": appReducer,\n});","/*\n src/reducers/appReducer.js\n*/\nimport { Map } from 'immutable';\n\nexport default (state = new Map(), action) => {\n\n  switch (action.type) {\n    default: return state;\n  }\n  \n}","/*\n src/App.js\n*/\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// redux imports\nimport { actions } from './actions/appAction';\nimport * as componentSelectors from './selectors/appSelector';\n\nimport './App.css';\n\nclass App extends Component {\n\n  render = () => (\n    <div className=\"App\">\n      <p>HELLO WORLD</p>\n    </div>\n  );\n}\n\nconst {\n} = componentSelectors\n\nconst mapStateToProps = state => ({\n});\n\nconst {\n} = actions;\n\nconst mapDispatchToProps = dispatch => ({\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n\n","/*\n src/actions/appAction.js\n*/\n\n\nexport const actions = {\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n src/index.js\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();","/*\n * src/store.js\n * With initialState\n*/\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './reducers/rootReducer';\n\n\nexport default () => createStore(\n        rootReducer, \n        composeWithDevTools(applyMiddleware(thunk))\n  )\n"],"sourceRoot":""}